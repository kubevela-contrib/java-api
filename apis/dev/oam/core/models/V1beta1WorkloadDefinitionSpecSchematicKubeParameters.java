/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.oam.core.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A KubeParameter defines a configurable parameter of a component.
 */
@ApiModel(description = "A KubeParameter defines a configurable parameter of a component.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-19T04:50:27.278Z[Etc/UTC]")
public class V1beta1WorkloadDefinitionSpecSchematicKubeParameters {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FIELD_PATHS = "fieldPaths";
  @SerializedName(SERIALIZED_NAME_FIELD_PATHS)
  private List<String> fieldPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STRING("string"),
    
    NUMBER("number"),
    
    BOOLEAN("boolean");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;


  public V1beta1WorkloadDefinitionSpecSchematicKubeParameters description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of this parameter.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of this parameter.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public V1beta1WorkloadDefinitionSpecSchematicKubeParameters fieldPaths(List<String> fieldPaths) {
    
    this.fieldPaths = fieldPaths;
    return this;
  }

  public V1beta1WorkloadDefinitionSpecSchematicKubeParameters addFieldPathsItem(String fieldPathsItem) {
    this.fieldPaths.add(fieldPathsItem);
    return this;
  }

   /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter.  All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example &#39;spec.replicas&#39;.
   * @return fieldPaths
  **/
  @ApiModelProperty(required = true, value = "FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter.  All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.")

  public List<String> getFieldPaths() {
    return fieldPaths;
  }


  public void setFieldPaths(List<String> fieldPaths) {
    this.fieldPaths = fieldPaths;
  }


  public V1beta1WorkloadDefinitionSpecSchematicKubeParameters name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of this parameter
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name of this parameter")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1beta1WorkloadDefinitionSpecSchematicKubeParameters required(Boolean required) {
    
    this.required = required;
    return this;
  }

   /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   * @return required
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required specifies whether or not a value for this parameter must be supplied when authoring an Application.")

  public Boolean getRequired() {
    return required;
  }


  public void setRequired(Boolean required) {
    this.required = required;
  }


  public V1beta1WorkloadDefinitionSpecSchematicKubeParameters type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1beta1WorkloadDefinitionSpecSchematicKubeParameters v1beta1WorkloadDefinitionSpecSchematicKubeParameters = (V1beta1WorkloadDefinitionSpecSchematicKubeParameters) o;
    return Objects.equals(this.description, v1beta1WorkloadDefinitionSpecSchematicKubeParameters.description) &&
        Objects.equals(this.fieldPaths, v1beta1WorkloadDefinitionSpecSchematicKubeParameters.fieldPaths) &&
        Objects.equals(this.name, v1beta1WorkloadDefinitionSpecSchematicKubeParameters.name) &&
        Objects.equals(this.required, v1beta1WorkloadDefinitionSpecSchematicKubeParameters.required) &&
        Objects.equals(this.type, v1beta1WorkloadDefinitionSpecSchematicKubeParameters.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, fieldPaths, name, required, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1beta1WorkloadDefinitionSpecSchematicKubeParameters {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fieldPaths: ").append(toIndentedString(fieldPaths)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


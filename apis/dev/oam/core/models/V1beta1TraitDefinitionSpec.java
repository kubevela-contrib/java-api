/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.oam.core.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import dev.oam.core.models.V1beta1TraitDefinitionSpecSchematic;
import dev.oam.core.models.V1beta1TraitDefinitionSpecStatus;
import dev.oam.core.models.V1beta1WorkflowStepDefinitionSpecDefinitionRef;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A TraitDefinitionSpec defines the desired state of a TraitDefinition.
 */
@ApiModel(description = "A TraitDefinitionSpec defines the desired state of a TraitDefinition.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-19T04:50:27.278Z[Etc/UTC]")
public class V1beta1TraitDefinitionSpec {
  public static final String SERIALIZED_NAME_APPLIES_TO_WORKLOADS = "appliesToWorkloads";
  @SerializedName(SERIALIZED_NAME_APPLIES_TO_WORKLOADS)
  private List<String> appliesToWorkloads = null;

  public static final String SERIALIZED_NAME_CONFLICTS_WITH = "conflictsWith";
  @SerializedName(SERIALIZED_NAME_CONFLICTS_WITH)
  private List<String> conflictsWith = null;

  public static final String SERIALIZED_NAME_CONTROL_PLANE_ONLY = "controlPlaneOnly";
  @SerializedName(SERIALIZED_NAME_CONTROL_PLANE_ONLY)
  private Boolean controlPlaneOnly;

  public static final String SERIALIZED_NAME_DEFINITION_REF = "definitionRef";
  @SerializedName(SERIALIZED_NAME_DEFINITION_REF)
  private V1beta1WorkflowStepDefinitionSpecDefinitionRef definitionRef;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private Object extension;

  public static final String SERIALIZED_NAME_MANAGE_WORKLOAD = "manageWorkload";
  @SerializedName(SERIALIZED_NAME_MANAGE_WORKLOAD)
  private Boolean manageWorkload;

  public static final String SERIALIZED_NAME_POD_DISRUPTIVE = "podDisruptive";
  @SerializedName(SERIALIZED_NAME_POD_DISRUPTIVE)
  private Boolean podDisruptive;

  public static final String SERIALIZED_NAME_REVISION_ENABLED = "revisionEnabled";
  @SerializedName(SERIALIZED_NAME_REVISION_ENABLED)
  private Boolean revisionEnabled;

  public static final String SERIALIZED_NAME_SCHEMATIC = "schematic";
  @SerializedName(SERIALIZED_NAME_SCHEMATIC)
  private V1beta1TraitDefinitionSpecSchematic schematic;

  public static final String SERIALIZED_NAME_STAGE = "stage";
  @SerializedName(SERIALIZED_NAME_STAGE)
  private String stage;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private V1beta1TraitDefinitionSpecStatus status;

  public static final String SERIALIZED_NAME_WORKLOAD_REF_PATH = "workloadRefPath";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_REF_PATH)
  private String workloadRefPath;


  public V1beta1TraitDefinitionSpec appliesToWorkloads(List<String> appliesToWorkloads) {
    
    this.appliesToWorkloads = appliesToWorkloads;
    return this;
  }

  public V1beta1TraitDefinitionSpec addAppliesToWorkloadsItem(String appliesToWorkloadsItem) {
    if (this.appliesToWorkloads == null) {
      this.appliesToWorkloads = new ArrayList<>();
    }
    this.appliesToWorkloads.add(appliesToWorkloadsItem);
    return this;
  }

   /**
   * AppliesToWorkloads specifies the list of workload kinds this trait applies to. Workload kinds are specified in resource.group/version format, e.g. server.core.oam.dev/v1alpha2. Traits that omit this field apply to all workload kinds.
   * @return appliesToWorkloads
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AppliesToWorkloads specifies the list of workload kinds this trait applies to. Workload kinds are specified in resource.group/version format, e.g. server.core.oam.dev/v1alpha2. Traits that omit this field apply to all workload kinds.")

  public List<String> getAppliesToWorkloads() {
    return appliesToWorkloads;
  }


  public void setAppliesToWorkloads(List<String> appliesToWorkloads) {
    this.appliesToWorkloads = appliesToWorkloads;
  }


  public V1beta1TraitDefinitionSpec conflictsWith(List<String> conflictsWith) {
    
    this.conflictsWith = conflictsWith;
    return this;
  }

  public V1beta1TraitDefinitionSpec addConflictsWithItem(String conflictsWithItem) {
    if (this.conflictsWith == null) {
      this.conflictsWith = new ArrayList<>();
    }
    this.conflictsWith.add(conflictsWithItem);
    return this;
  }

   /**
   * ConflictsWith specifies the list of traits(CRD name, Definition name, CRD group) which could not apply to the same workloads with this trait. Traits that omit this field can work with any other traits. Example rules: \&quot;service\&quot; # Trait definition name \&quot;services.k8s.io\&quot; # API resource/crd name \&quot;*.networking.k8s.io\&quot; # API group \&quot;labelSelector:foo&#x3D;bar\&quot; # label selector labelSelector format: https://pkg.go.dev/k8s.io/apimachinery/pkg/labels#Parse
   * @return conflictsWith
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ConflictsWith specifies the list of traits(CRD name, Definition name, CRD group) which could not apply to the same workloads with this trait. Traits that omit this field can work with any other traits. Example rules: \"service\" # Trait definition name \"services.k8s.io\" # API resource/crd name \"*.networking.k8s.io\" # API group \"labelSelector:foo=bar\" # label selector labelSelector format: https://pkg.go.dev/k8s.io/apimachinery/pkg/labels#Parse")

  public List<String> getConflictsWith() {
    return conflictsWith;
  }


  public void setConflictsWith(List<String> conflictsWith) {
    this.conflictsWith = conflictsWith;
  }


  public V1beta1TraitDefinitionSpec controlPlaneOnly(Boolean controlPlaneOnly) {
    
    this.controlPlaneOnly = controlPlaneOnly;
    return this;
  }

   /**
   * ControlPlaneOnly defines which cluster is dispatched to
   * @return controlPlaneOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ControlPlaneOnly defines which cluster is dispatched to")

  public Boolean getControlPlaneOnly() {
    return controlPlaneOnly;
  }


  public void setControlPlaneOnly(Boolean controlPlaneOnly) {
    this.controlPlaneOnly = controlPlaneOnly;
  }


  public V1beta1TraitDefinitionSpec definitionRef(V1beta1WorkflowStepDefinitionSpecDefinitionRef definitionRef) {
    
    this.definitionRef = definitionRef;
    return this;
  }

   /**
   * Get definitionRef
   * @return definitionRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1beta1WorkflowStepDefinitionSpecDefinitionRef getDefinitionRef() {
    return definitionRef;
  }


  public void setDefinitionRef(V1beta1WorkflowStepDefinitionSpecDefinitionRef definitionRef) {
    this.definitionRef = definitionRef;
  }


  public V1beta1TraitDefinitionSpec extension(Object extension) {
    
    this.extension = extension;
    return this;
  }

   /**
   * Extension is used for extension needs by OAM platform builders
   * @return extension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extension is used for extension needs by OAM platform builders")

  public Object getExtension() {
    return extension;
  }


  public void setExtension(Object extension) {
    this.extension = extension;
  }


  public V1beta1TraitDefinitionSpec manageWorkload(Boolean manageWorkload) {
    
    this.manageWorkload = manageWorkload;
    return this;
  }

   /**
   * ManageWorkload defines the trait would be responsible for creating the workload
   * @return manageWorkload
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ManageWorkload defines the trait would be responsible for creating the workload")

  public Boolean getManageWorkload() {
    return manageWorkload;
  }


  public void setManageWorkload(Boolean manageWorkload) {
    this.manageWorkload = manageWorkload;
  }


  public V1beta1TraitDefinitionSpec podDisruptive(Boolean podDisruptive) {
    
    this.podDisruptive = podDisruptive;
    return this;
  }

   /**
   * PodDisruptive specifies whether using the trait will cause the pod to restart or not.
   * @return podDisruptive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "PodDisruptive specifies whether using the trait will cause the pod to restart or not.")

  public Boolean getPodDisruptive() {
    return podDisruptive;
  }


  public void setPodDisruptive(Boolean podDisruptive) {
    this.podDisruptive = podDisruptive;
  }


  public V1beta1TraitDefinitionSpec revisionEnabled(Boolean revisionEnabled) {
    
    this.revisionEnabled = revisionEnabled;
    return this;
  }

   /**
   * Revision indicates whether a trait is aware of component revision
   * @return revisionEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Revision indicates whether a trait is aware of component revision")

  public Boolean getRevisionEnabled() {
    return revisionEnabled;
  }


  public void setRevisionEnabled(Boolean revisionEnabled) {
    this.revisionEnabled = revisionEnabled;
  }


  public V1beta1TraitDefinitionSpec schematic(V1beta1TraitDefinitionSpecSchematic schematic) {
    
    this.schematic = schematic;
    return this;
  }

   /**
   * Get schematic
   * @return schematic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1beta1TraitDefinitionSpecSchematic getSchematic() {
    return schematic;
  }


  public void setSchematic(V1beta1TraitDefinitionSpecSchematic schematic) {
    this.schematic = schematic;
  }


  public V1beta1TraitDefinitionSpec stage(String stage) {
    
    this.stage = stage;
    return this;
  }

   /**
   * Stage defines the stage information to which this trait resource processing belongs. Currently, PreDispatch and PostDispatch are provided, which are used to control resource pre-process and post-process respectively.
   * @return stage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Stage defines the stage information to which this trait resource processing belongs. Currently, PreDispatch and PostDispatch are provided, which are used to control resource pre-process and post-process respectively.")

  public String getStage() {
    return stage;
  }


  public void setStage(String stage) {
    this.stage = stage;
  }


  public V1beta1TraitDefinitionSpec status(V1beta1TraitDefinitionSpecStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1beta1TraitDefinitionSpecStatus getStatus() {
    return status;
  }


  public void setStatus(V1beta1TraitDefinitionSpecStatus status) {
    this.status = status;
  }


  public V1beta1TraitDefinitionSpec workloadRefPath(String workloadRefPath) {
    
    this.workloadRefPath = workloadRefPath;
    return this;
  }

   /**
   * WorkloadRefPath indicates where/if a trait accepts a workloadRef object
   * @return workloadRefPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "WorkloadRefPath indicates where/if a trait accepts a workloadRef object")

  public String getWorkloadRefPath() {
    return workloadRefPath;
  }


  public void setWorkloadRefPath(String workloadRefPath) {
    this.workloadRefPath = workloadRefPath;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1beta1TraitDefinitionSpec v1beta1TraitDefinitionSpec = (V1beta1TraitDefinitionSpec) o;
    return Objects.equals(this.appliesToWorkloads, v1beta1TraitDefinitionSpec.appliesToWorkloads) &&
        Objects.equals(this.conflictsWith, v1beta1TraitDefinitionSpec.conflictsWith) &&
        Objects.equals(this.controlPlaneOnly, v1beta1TraitDefinitionSpec.controlPlaneOnly) &&
        Objects.equals(this.definitionRef, v1beta1TraitDefinitionSpec.definitionRef) &&
        Objects.equals(this.extension, v1beta1TraitDefinitionSpec.extension) &&
        Objects.equals(this.manageWorkload, v1beta1TraitDefinitionSpec.manageWorkload) &&
        Objects.equals(this.podDisruptive, v1beta1TraitDefinitionSpec.podDisruptive) &&
        Objects.equals(this.revisionEnabled, v1beta1TraitDefinitionSpec.revisionEnabled) &&
        Objects.equals(this.schematic, v1beta1TraitDefinitionSpec.schematic) &&
        Objects.equals(this.stage, v1beta1TraitDefinitionSpec.stage) &&
        Objects.equals(this.status, v1beta1TraitDefinitionSpec.status) &&
        Objects.equals(this.workloadRefPath, v1beta1TraitDefinitionSpec.workloadRefPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliesToWorkloads, conflictsWith, controlPlaneOnly, definitionRef, extension, manageWorkload, podDisruptive, revisionEnabled, schematic, stage, status, workloadRefPath);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1beta1TraitDefinitionSpec {\n");
    sb.append("    appliesToWorkloads: ").append(toIndentedString(appliesToWorkloads)).append("\n");
    sb.append("    conflictsWith: ").append(toIndentedString(conflictsWith)).append("\n");
    sb.append("    controlPlaneOnly: ").append(toIndentedString(controlPlaneOnly)).append("\n");
    sb.append("    definitionRef: ").append(toIndentedString(definitionRef)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    manageWorkload: ").append(toIndentedString(manageWorkload)).append("\n");
    sb.append("    podDisruptive: ").append(toIndentedString(podDisruptive)).append("\n");
    sb.append("    revisionEnabled: ").append(toIndentedString(revisionEnabled)).append("\n");
    sb.append("    schematic: ").append(toIndentedString(schematic)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    workloadRefPath: ").append(toIndentedString(workloadRefPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

